"""
BaseGeometry Tests
"""

>>> bg = __import__("7-base_geometry").BaseGeometry

>>> d = __import__("7-base_geometry").__doc__
>>> len(d) > 3
True

>>> d = __import__("7-base_geometry").BaseGeometry.__doc__
>>> len(d) > 3
True

>>> d = __import__("7-base_geometry").BaseGeometry.area.__doc__
>>> len(d) > 3
True
>>> d = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
>>> len(d) > 3
True

>>> b = bg()
>>> b.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> b.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer
>>> b.integer_validator("float", 1.5)
Traceback (most recent call last):
...
TypeError: float must be an integer
>>> b.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
...
TypeError: complex must be an integer
>>> b.integer_validator("string", "hello")
Traceback (most recent call last):
...
TypeError: string must be an integer
>>> b.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer
>>> b.integer_validator("list", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: list must be an integer
>>> b.integer_validator("dict", {"key": "value"})
Traceback (most recent call last):
...
TypeError: dict must be an integer
>>> b.integer_validator("frozenset", frozenset(["hello", "world"]))
Traceback (most recent call last):
...
TypeError: frozenset must be an integer
>>> b.integer_validator("bytes", b"bytes")
Traceback (most recent call last):
...
TypeError: bytes must be an integer

>>> b.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> b.integer_validator("amount")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'
